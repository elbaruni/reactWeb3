[{"G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\index.js":"1","G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\App.js":"2","G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1606850743944,"results":"4","hashOfConfig":"5"},{"size":5519,"mtime":1606892151091,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1606850743989,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1x8pdj",{"filePath":"11","messages":"12","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":5,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\index.js",[],["17","18"],"G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\App.js",["19","20","21","22","23","24","25","26","27","28","29","30","31","32","33"],"import Web3 from 'web3';\r\nimport React, { useState,useEffect } from 'react';\r\nimport rcvr from \"./contracts/RCVR.json\";\r\nimport migration from \"./contracts/Migration.json\"\r\n\r\nconst networks={\r\n  \"1\":\"MainNet\",\r\n  \"3\":\"Ropsten\",\r\n  \"4\":\"Rinkeby\",\r\n  \"5\":\"GÃ¶rli\" ,\r\n  \"42\":\"Kovan \"\r\n}\r\n\r\nconst App = props => {\r\n  const [account,setAccount]=useState(\"\")\r\n  const [balance,setBalance]=useState(0)\r\n  const [networkId,setNetworkId]=useState(\"\")\r\n  const [stake,setStake]=useState(\"\")\r\n  \r\n  //Function to check if account changed and set it to account state \r\n const getRCVRBalance=async ()=>{\r\n\r\n  try {  \r\n    if(networkId==\"3\"){\r\n      const rcvrContract=await new window.web3.eth.Contract(rcvr.abi, rcvr.address) \r\n      const balance=await rcvrContract.methods.balanceOf(account).call()\r\n      setBalance(window.web3.utils.fromWei( balance,'ether') )  \r\n    } else {\r\n      console.log(\"wrong network\")\r\n      setBalance(null)  \r\n    }\r\n  }\r\n  catch(e){\r\n    console.log(e.message)\r\n  }\r\n }\r\n\r\n const createSafeStake=async()=>{\r\n  try {  \r\n    if(networkId==\"3\"){\r\n      const web3= new Web3;\r\n      const BN = web3.utils.BN;\r\n      let amount = parseInt(stake);\r\n\r\n      const rcvrContract=await new window.web3.eth.Contract(rcvr.abi, rcvr.address) \r\n      const txHash = await rcvrContract.methods.createSafeStake(web3.utils.toWei(`${amount}`, 'ether')).send({from:account})\r\n      console.log(txHash.transactionHash);\r\n    } else {\r\n      console.log(\"wrong network\")\r\n    }\r\n   }\r\n  catch(e){\r\n    console.log(e.message)\r\n  }\r\n }\r\n\r\n const removeStake =async()=>{\r\n  try {  \r\n    if(networkId==\"3\"){  \r\n      const web3= new Web3;\r\n      const BN = web3.utils.BN;\r\n      let amount = parseInt(stake);\r\n\r\n      const rcvrContract=await new window.web3.eth.Contract(rcvr.abi, rcvr.address) \r\n      const txHash=await rcvrContract.methods.removeStake(web3.utils.toWei(`${amount}`, 'ether')).send({from:account})\r\n      console.log(txHash.transactionHash)\r\n    } else {\r\n      console.log(\"wrong network\")\r\n    }\r\n   }\r\n  catch(e){\r\n    console.log(e.message)\r\n  }\r\n }\r\n\r\n const forceDistribute1=async()=>{\r\n  try {  \r\n    if(networkId==\"3\"){\r\n      const web3= new Web3\r\n     debugger\r\n      const rcvrContract=await new window.web3.eth.Contract(rcvr.abi, rcvr.address) \r\n      const txHash=await rcvrContract.methods.Forcedistribute(true).send({from:account,value:web3.utils.toWei('0.1','ether')})\r\n     \r\n     console.log(txHash.transactionHash)\r\n    }else{\r\n      console.log(\"wrong network\")\r\n    }\r\n   }\r\n  catch(e){\r\n    console.log(e.message)\r\n  }\r\n }\r\n\r\n const forceDistribute2=async()=>{\r\n  try {  \r\n    if(networkId==\"3\"){\r\n      const web3= new Web3\r\n     \r\n      const rcvrContract=await new window.web3.eth.Contract(rcvr.abi, rcvr.address) \r\n      const txHash=await rcvrContract.methods.Forcedistribute(false).send({from:account,value:web3.utils.toWei('0.1','ether')})\r\n     \r\n     console.log(txHash.transactionHash)\r\n    }else{\r\n      console.log(\"wrong network\")\r\n    }\r\n   }\r\n  catch(e){\r\n    console.log(e.message)\r\n  }\r\n }\r\n const migrate=async()=>{\r\n  try {  \r\n    if(networkId==\"3\"){\r\n      const web3= new Web3\r\n     \r\n      const migrationContract=await new window.web3.eth.Contract(migration.abi, migration.address) \r\n      const txHash=await migrationContract.methods.migrate().send({from:account})\r\n     \r\n     console.log(txHash.transactionHash)\r\n    }else{\r\n      console.log(\"wrong network\")\r\n    }\r\n   }\r\n  catch(e){\r\n    console.log(e.message)\r\n  }\r\n }\r\n\r\n \r\n const getAccount=async ()=>{\r\n  const web3 = window.web3\r\n  // Load account\r\n  const accounts = await web3.eth.getAccounts()\r\n  console.log(accounts)\r\n  setAccount(accounts[0])\r\n }\r\n  useEffect(() => {\r\n    setNetworkId(window.ethereum.networkVersion)\r\n    window.ethereum.on('networkChanged', function(networkId){\r\n      console.log('networkChanged',networkId);\r\n      setNetworkId(networkId);\r\n      getRCVRBalance(); \r\n    });\r\n    window.ethereum.on('accountsChanged', function (accounts) {\r\n      setAccount(accounts[0]);\r\n      getRCVRBalance();\r\n    });\r\n  } ,[]);\r\n \r\nconst  connectWeb3=async()=>{\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum)\r\n    await window.ethereum.enable()\r\n  }\r\n  else if (window.web3) {\r\n    window.web3 = new Web3(window.web3.currentProvider)\r\n  }\r\n  else {\r\n    window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n  }\r\n  getAccount()  \r\n  await getRCVRBalance()\r\n}\r\n  let content = (\r\n    <React.Fragment>\r\n      <div  style={{padding:'30px'}}>\r\n        <h1> RCVR token UI</h1>\r\n        <p>Address: {account}</p>\r\n        <p>RCVR Balance: {balance}</p>\r\n        <p>NetworkId: { networks[networkId]}</p>\r\n        <p>         \r\n          <button onClick={connectWeb3}>connect</button>\r\n        </p>\r\n        <hr/>\r\n        <p>\r\n          <input type=\"number\" min=\"1\" max=\"1000000\" defaultValue={stake} onChange={(e) => setStake(e.target.value)}/>\r\n          <br/>\r\n          <button id=\"btn1\" onClick={createSafeStake}>Create Stake</button>\r\n          <button id=\"btn2\" onClick={removeStake}>Remove Stake</button>\r\n        </p>\r\n        <p>\r\n          <button id=\"btn3\" onClick={forceDistribute1}>Force Calculation 1</button>\r\n          <button id=\"btn4\" onClick={forceDistribute2}>Force Calculation 2</button>\r\n        </p>\r\n        <hr/>\r\n        <p>\r\n          <button id=\"btn5\" onClick={migrate}>Migrate</button>\r\n        </p>\r\n        <hr/>\r\n       </div>\r\n    </React.Fragment>\r\n  );\r\n  return content;\r\n};\r\nexport default App;","G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\reportWebVitals.js",[],["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":24,"column":17,"nodeType":"42","messageId":"43","endLine":24,"endColumn":19},{"ruleId":"40","severity":1,"message":"41","line":40,"column":17,"nodeType":"42","messageId":"43","endLine":40,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":41,"column":19,"nodeType":"46","messageId":"47","endLine":41,"endColumn":27,"fix":"48"},{"ruleId":"49","severity":1,"message":"50","line":42,"column":13,"nodeType":"51","messageId":"52","endLine":42,"endColumn":15},{"ruleId":"40","severity":1,"message":"41","line":59,"column":17,"nodeType":"42","messageId":"43","endLine":59,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":60,"column":19,"nodeType":"46","messageId":"47","endLine":60,"endColumn":27,"fix":"53"},{"ruleId":"49","severity":1,"message":"50","line":61,"column":13,"nodeType":"51","messageId":"52","endLine":61,"endColumn":15},{"ruleId":"40","severity":1,"message":"41","line":78,"column":17,"nodeType":"42","messageId":"43","endLine":78,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":79,"column":19,"nodeType":"46","messageId":"47","endLine":79,"endColumn":27,"fix":"54"},{"ruleId":"40","severity":1,"message":"41","line":96,"column":17,"nodeType":"42","messageId":"43","endLine":96,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":97,"column":19,"nodeType":"46","messageId":"47","endLine":97,"endColumn":27,"fix":"55"},{"ruleId":"40","severity":1,"message":"41","line":113,"column":17,"nodeType":"42","messageId":"43","endLine":113,"endColumn":19},{"ruleId":"49","severity":1,"message":"56","line":114,"column":13,"nodeType":"51","messageId":"52","endLine":114,"endColumn":17},{"ruleId":"44","severity":1,"message":"45","line":114,"column":19,"nodeType":"46","messageId":"47","endLine":114,"endColumn":27,"fix":"57"},{"ruleId":"58","severity":1,"message":"59","line":148,"column":6,"nodeType":"60","endLine":148,"endColumn":8,"suggestions":"61"},{"ruleId":"36","replacedBy":"62"},{"ruleId":"38","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"66","text":"67"},"no-unused-vars","'BN' is assigned a value but never used.","Identifier","unusedVar",{"range":"68","text":"67"},{"range":"69","text":"67"},{"range":"70","text":"67"},"'web3' is assigned a value but never used.",{"range":"71","text":"67"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRCVRBalance'. Either include it or remove the dependency array.","ArrayExpression",["72"],["64"],["65"],"no-global-assign","no-unsafe-negation",[1092,1092],"()",[1634,1634],[2171,2171],[2662,2662],[3135,3135],{"desc":"73","fix":"74"},"Update the dependencies array to be: [getRCVRBalance]",{"range":"75","text":"76"},[4061,4063],"[getRCVRBalance]"]