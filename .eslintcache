[{"G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\index.js":"1","G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\App.js":"2","G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1606850743944,"results":"4","hashOfConfig":"5"},{"size":11413,"mtime":1607019012463,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1606850743989,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1x8pdj",{"filePath":"11","messages":"12","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":6,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\index.js",[],["16","17"],"G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43"],"import Web3 from 'web3';\r\nimport React, { useState, useEffect } from 'react';\r\nimport rcvr from \"./contracts/RCVR.json\";\r\nimport migration from \"./contracts/Migration.json\"\r\nimport deadtoken from \"./contracts/DeadToken.json\"\r\nimport BigNumber from 'bignumber.js';\r\n\r\nconst networks = {\r\n  \"1\": \"MainNet\",\r\n  \"3\": \"Ropsten\",\r\n  \"4\": \"Rinkeby\",\r\n  \"5\": \"GÃ¶rli\",\r\n  \"42\": \"Kovan \"\r\n}\r\n\r\nconst App = props => {\r\n  const [windowWeb3, setWindowWeb3] = useState(null)\r\n  const [account, setAccount] = useState(\"\")\r\n  const [locked, setLocked] = useState(true)\r\n  const [balance, setBalance] = useState(0)\r\n  const [networkId, setNetworkId] = useState(\"\")\r\n  const [metamaskInstalled, setMetamaskInstalled] = useState(false)\r\n\r\n  const [stake, setStake] = useState(\"\")\r\n\r\n  //Function to check if account changed and set it to account state \r\n  const createSafeStake = async () => {\r\n    try {\r\n      if (networkId == \"4\") {\r\n        const web3 = new Web3;\r\n        const BN = web3.utils.BN;\r\n        let amount = parseInt(stake);\r\n\r\n        const rcvrContract = await new window.web3.eth.Contract(rcvr.abi, rcvr.address)\r\n        const txHash = await rcvrContract.methods.createSafeStake(web3.utils.toWei(`${amount}`, 'ether')).send({ from: account })\r\n        console.log(txHash.transactionHash);\r\n      } else {\r\n        console.log(\"wrong network\")\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const removeStake = async () => {\r\n    try {\r\n      if (networkId == \"4\") {\r\n        const web3 = new Web3;\r\n        const BN = web3.utils.BN;\r\n        let amount = parseInt(stake);\r\n\r\n        const rcvrContract = await new window.web3.eth.Contract(rcvr.abi, rcvr.address)\r\n        const txHash = await rcvrContract.methods.removeStake(web3.utils.toWei(`${amount}`, 'ether')).send({ from: account })\r\n        console.log(txHash.transactionHash)\r\n      } else {\r\n        console.log(\"wrong network\")\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const forceDistribute1 = async () => {\r\n    try {\r\n      if (networkId == \"4\") {\r\n        const web3 = new Web3\r\n        const rcvrContract = await new window.web3.eth.Contract(rcvr.abi, rcvr.address)\r\n        const txHash = await rcvrContract.methods.Forcedistribute(true).send({ from: account, value: web3.utils.toWei('0.1', 'ether') })\r\n\r\n        console.log(txHash.transactionHash)\r\n      } else {\r\n        console.log(\"wrong network\")\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const forceDistribute2 = async () => {\r\n    try {\r\n      if (networkId == \"4\") {\r\n        const web3 = new Web3\r\n\r\n        const rcvrContract = await new window.web3.eth.Contract(rcvr.abi, rcvr.address)\r\n        const txHash = await rcvrContract.methods.Forcedistribute(false).send({ from: account, value: web3.utils.toWei('0.1', 'ether') })\r\n\r\n        console.log(txHash.transactionHash)\r\n      } else {\r\n        console.log(\"wrong network\")\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const approve = async () => {\r\n    try {\r\n      if (networkId == \"4\") {\r\n        const web3 = new Web3;\r\n\r\n        const maxAmount = new BigNumber(1).multipliedBy(new BigNumber(2).pow(256)).minus(1);\r\n        const deadtokenContract = await new window.web3.eth.Contract(deadtoken.abi, deadtoken.address)\r\n        const txHash = await deadtokenContract.methods.approve(migration.address, maxAmount.toString(10)).send({ from: account })\r\n\r\n        console.log(txHash.transactionHash)\r\n      } else {\r\n        console.log(\"wrong network\")\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const migrate = async () => {\r\n    try {\r\n      if (networkId == \"4\") {\r\n        const web3 = new Web3\r\n\r\n        const migrationContract = await new window.web3.eth.Contract(migration.abi, migration.address)\r\n        const txHash = await migrationContract.methods.migrate().send({ from: account })\r\n\r\n        console.log(txHash.transactionHash)\r\n      } else {\r\n        console.log(\"wrong network\")\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  useEffect(async () => {\r\n\r\n    // const metamaskInstalled = typeof windowWeb3 !== 'undefined'\r\n    if (windowWeb3) {\r\n      const accounts = await windowWeb3.eth.getAccounts()\r\n      if (typeof accounts != 'undefined' && accounts.length > 0) {\r\n        const networkId = await windowWeb3.eth.net.getId()\r\n        console.log(networkId)\r\n        if (networkId == \"4\") {\r\n          const account = accounts[0]\r\n          const web3 = new Web3()\r\n          const rvcContract = await new windowWeb3.eth.Contract(rcvr.abi, rcvr.address)\r\n          const _balance = await rvcContract.methods.balanceOf(account).call()\r\n          setAccount(accounts[0])\r\n          setBalance(web3.utils.fromWei(String(_balance), 'ether'))\r\n          setLocked(!windowWeb3.currentProvider._state.isUnlocked)\r\n          setNetworkId(networkId)\r\n        }\r\n        else {\r\n          setNetworkId(networkId)\r\n          setBalance(0)\r\n        }\r\n      }\r\n      else {\r\n        setAccount('')\r\n        setBalance(0)\r\n        setLocked(!windowWeb3.currentProvider._state.isUnlocked)\r\n      }\r\n      window.ethereum.on('networkChanged', async function (netId) {\r\n        const accounts = await windowWeb3.eth.getAccounts()\r\n        if (typeof accounts != 'undefined' && accounts.length > 0) {\r\n          const networkId = await windowWeb3.eth.net.getId()\r\n          console.log(networkId)\r\n\r\n          if (networkId == \"4\") {\r\n            const account = accounts[0]\r\n            const web3 = new Web3()\r\n            const rvcContract = await new windowWeb3.eth.Contract(rcvr.abi, rcvr.address)\r\n            const _balance = await rvcContract.methods.balanceOf(account).call()\r\n            setAccount(accounts[0])\r\n            setBalance(web3.utils.fromWei(String(_balance), 'ether'))\r\n            setLocked(!windowWeb3.currentProvider._state.isUnlocked)\r\n            setNetworkId(networkId)\r\n          }\r\n          else {\r\n            setNetworkId(networkId)\r\n            setBalance(0)\r\n          }\r\n        }\r\n        setNetworkId(netId)\r\n      });\r\n      window.ethereum.on('accountsChanged', async function (accounts) {\r\n        if (typeof accounts !== 'undefined' && accounts.length > 0) {\r\n          const account = accounts[0]\r\n          const web3 = new Web3()\r\n          let _balance = 0\r\n          if (networkId == \"4\") {\r\n            const rvcContract = await new windowWeb3.eth.Contract(rcvr.abi, rcvr.address)\r\n            _balance = await rvcContract.methods.balanceOf(account).call()\r\n          }\r\n          setAccount(accounts[0])\r\n          setBalance(web3.utils.fromWei(String(_balance), 'ether'))\r\n          setLocked(!windowWeb3.currentProvider._state.isUnlocked)\r\n        }\r\n        else {\r\n          setWindowWeb3(null)\r\n          setAccount('')\r\n          setBalance(0)\r\n          setLocked(true)\r\n          setWindowWeb3(null)\r\n        }\r\n      });\r\n    } else {\r\n      try {\r\n        if (window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n\r\n          setWindowWeb3(new Web3(window.ethereum))\r\n          const web3 = new Web3()\r\n          // Load account\r\n          const accounts = await window.web3.eth.getAccounts()\r\n          const networkId = await window.web3.eth.net.getId()\r\n          const account = accounts[0]\r\n          let _balance = 0\r\n          if (networkId == \"4\") {\r\n            const rvcContract = await new windowWeb3.eth.Contract(rcvr.abi, rcvr.address)\r\n            _balance = await rvcContract.methods.balanceOf(account).call()\r\n          }\r\n          setAccount(accounts[0])\r\n          setBalance(web3.utils.fromWei(String(_balance), 'ether'))\r\n          setLocked(!windowWeb3.currentProvider._state.isUnlocked)\r\n          setNetworkId(networkId)\r\n        }\r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n          setWindowWeb3(new Web3(window.web3.currentProvider))\r\n          const web3 = new Web3()\r\n          // Load account\r\n          const accounts = await window.web3.eth.getAccounts()\r\n          const networkId = await window.web3.eth.net.getId()\r\n          const account = accounts[0]\r\n          let _balance = 0\r\n          if (networkId == \"4\") {\r\n            const rvcContract = await new windowWeb3.eth.Contract(rcvr.abi, rcvr.address)\r\n            _balance = await rvcContract.methods.balanceOf(account).call()\r\n\r\n          }\r\n          setLocked(!windowWeb3.currentProvider._state.isUnlocked)\r\n          setAccount(accounts[0])\r\n          setBalance(web3.utils.fromWei(String(_balance), 'ether'))\r\n          setNetworkId(networkId)\r\n        }\r\n        else {\r\n          // DO NOTHING...\r\n        }\r\n      }\r\n      catch (e) {\r\n        console.log(e.message)\r\n      }\r\n    }\r\n  }, [windowWeb3]);\r\n\r\n  const loadWeb3 = async () => {\r\n    try {\r\n      if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum)\r\n        setWindowWeb3(new Web3(window.ethereum))\r\n        //window.web3 = new Web3(window.ethereum)\r\n        await window.ethereum.enable()\r\n      }\r\n      else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider)\r\n        setWindowWeb3(new Web3(window.web3.currentProvider))\r\n        //  window.web3 = new Web3(window.web3.currentProvider)\r\n      }\r\n      else {\r\n        // DO NOTHING...\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const loadBlockchainData = async () => {\r\n\r\n    const web3 = new Web3()\r\n    // Load account\r\n    const accounts = await window.web3.eth.getAccounts()\r\n    const networkId = await window.web3.eth.net.getId()\r\n    const account = accounts[0]\r\n    let _balance = 0\r\n    if (networkId == \"4\") {\r\n      const rvcContract = await new windowWeb3.eth.Contract(rcvr.abi, rcvr.address)\r\n      _balance = await rvcContract.methods.balanceOf(account).call()\r\n    }\r\n    setLocked(!windowWeb3.currentProvider._state.isUnlocked)\r\n    setAccount(accounts[0])\r\n    setBalance(web3.utils.fromWei(String(_balance), 'ether'))\r\n\r\n    setNetworkId(networkId)\r\n  }\r\n  const connectWeb3 = async () => {\r\n    await loadWeb3()\r\n    await loadBlockchainData()\r\n  }\r\n\r\n  let content = (\r\n    <React.Fragment>\r\n      <div style={{ padding: '30px' }}>\r\n        <h1> RCVR token UI</h1>\r\n        <p>Address: {account}</p>\r\n        <p>RCVR Balance: {balance}</p>\r\n        <p>NetworkId: {networks[networkId]}</p>\r\n        <p> {!locked ? \"connected\" : \"not connected\"} </p>\r\n        <p>\r\n          <button onClick={connectWeb3} disabled={!locked}>connect</button>\r\n        </p>\r\n        <hr />\r\n        <p>\r\n          <input type=\"number\" min=\"1\" max=\"1000000\" defaultValue={stake} onChange={(e) => setStake(e.target.value)} />\r\n          <br />\r\n          <button id=\"btn1\" onClick={createSafeStake}>Create Stake</button>\r\n          <button id=\"btn2\" onClick={removeStake}>Remove Stake</button>\r\n        </p>\r\n        <p>\r\n          <button id=\"btn3\" onClick={forceDistribute1}>Force Calculation 1</button>\r\n          <button id=\"btn4\" onClick={forceDistribute2}>Force Calculation 2</button>\r\n        </p>\r\n        <hr />\r\n        <p>\r\n          <button id=\"btn5\" onClick={approve}>Approve</button>\r\n          <button id=\"btn6\" onClick={migrate}>Migrate</button>\r\n        </p>\r\n        <hr />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n  return content;\r\n};\r\nexport default App;","G:\\workspace\\Bruce_Gusev\\workspace\\reactWeb3\\src\\reportWebVitals.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":22,"column":10,"nodeType":"50","messageId":"51","endLine":22,"endColumn":27},{"ruleId":"48","severity":1,"message":"52","line":22,"column":29,"nodeType":"50","messageId":"51","endLine":22,"endColumn":49},{"ruleId":"53","severity":1,"message":"54","line":29,"column":21,"nodeType":"55","messageId":"56","endLine":29,"endColumn":23},{"ruleId":"57","severity":1,"message":"58","line":30,"column":22,"nodeType":"59","messageId":"60","endLine":30,"endColumn":30,"fix":"61"},{"ruleId":"48","severity":1,"message":"62","line":31,"column":15,"nodeType":"50","messageId":"51","endLine":31,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":48,"column":21,"nodeType":"55","messageId":"56","endLine":48,"endColumn":23},{"ruleId":"57","severity":1,"message":"58","line":49,"column":22,"nodeType":"59","messageId":"60","endLine":49,"endColumn":30,"fix":"63"},{"ruleId":"48","severity":1,"message":"62","line":50,"column":15,"nodeType":"50","messageId":"51","endLine":50,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":67,"column":21,"nodeType":"55","messageId":"56","endLine":67,"endColumn":23},{"ruleId":"57","severity":1,"message":"58","line":68,"column":22,"nodeType":"59","messageId":"60","endLine":68,"endColumn":30,"fix":"64"},{"ruleId":"53","severity":1,"message":"54","line":84,"column":21,"nodeType":"55","messageId":"56","endLine":84,"endColumn":23},{"ruleId":"57","severity":1,"message":"58","line":85,"column":22,"nodeType":"59","messageId":"60","endLine":85,"endColumn":30,"fix":"65"},{"ruleId":"53","severity":1,"message":"54","line":102,"column":21,"nodeType":"55","messageId":"56","endLine":102,"endColumn":23},{"ruleId":"48","severity":1,"message":"66","line":103,"column":15,"nodeType":"50","messageId":"51","endLine":103,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":103,"column":22,"nodeType":"59","messageId":"60","endLine":103,"endColumn":30,"fix":"67"},{"ruleId":"53","severity":1,"message":"54","line":121,"column":21,"nodeType":"55","messageId":"56","endLine":121,"endColumn":23},{"ruleId":"48","severity":1,"message":"66","line":122,"column":15,"nodeType":"50","messageId":"51","endLine":122,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":122,"column":22,"nodeType":"59","messageId":"60","endLine":122,"endColumn":30,"fix":"68"},{"ruleId":"69","severity":1,"message":"70","line":137,"column":13,"nodeType":"71","endLine":257,"endColumn":4},{"ruleId":"53","severity":1,"message":"54","line":145,"column":23,"nodeType":"55","messageId":"56","endLine":145,"endColumn":25},{"ruleId":"53","severity":1,"message":"54","line":171,"column":25,"nodeType":"55","messageId":"56","endLine":171,"endColumn":27},{"ruleId":"53","severity":1,"message":"54","line":193,"column":25,"nodeType":"55","messageId":"56","endLine":193,"endColumn":27},{"ruleId":"53","severity":1,"message":"54","line":221,"column":25,"nodeType":"55","messageId":"56","endLine":221,"endColumn":27},{"ruleId":"53","severity":1,"message":"54","line":239,"column":25,"nodeType":"55","messageId":"56","endLine":239,"endColumn":27},{"ruleId":"69","severity":1,"message":"72","line":257,"column":6,"nodeType":"73","endLine":257,"endColumn":18,"suggestions":"74"},{"ruleId":"53","severity":1,"message":"54","line":289,"column":19,"nodeType":"55","messageId":"56","endLine":289,"endColumn":21},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'metamaskInstalled' is assigned a value but never used.","Identifier","unusedVar","'setMetamaskInstalled' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"77","text":"78"},"'BN' is assigned a value but never used.",{"range":"79","text":"78"},{"range":"80","text":"78"},{"range":"81","text":"78"},"'web3' is assigned a value but never used.",{"range":"82","text":"78"},{"range":"83","text":"78"},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'networkId'. Either include it or remove the dependency array.","ArrayExpression",["84"],"no-global-assign","no-unsafe-negation",[947,947],"()",[1531,1531],[2115,2115],[2635,2635],[3149,3149],[3765,3765],{"desc":"85","fix":"86"},"Update the dependencies array to be: [networkId, windowWeb3]",{"range":"87","text":"88"},[8826,8838],"[networkId, windowWeb3]"]